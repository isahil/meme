{"version":3,"sources":["header.js","memeComponent.js","imgflip.js","memeContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeComponent","topText","bottomText","image","handleChange","roulleteClick","memeges","console","log","className","placeholder","name","value","onChange","onClick","ImgFlip","memes","fetch","request","json","data","randomMeme","meme","Math","floor","random","length","url","MemeContainer","useState","setImage","setMemeges","setTopText","setBottomText","a","memeClick","event","target","id","useEffect","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","pathname","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OAeeA,MAbf,WACE,OACE,gCACE,4CACA,yBACEC,IAAI,iEACJC,IAAI,WAEN,4C,8BC+BSC,EAvCO,SAAC,GAOhB,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,WACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,cACAC,EACI,EADJA,QAGA,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,SAASX,IAAKK,IAC7B,wBAAIM,UAAU,WAAd,IAA0BR,EAA1B,KACA,wBAAIQ,UAAU,cAAd,IAA6BP,EAA7B,MAGF,yBAAKO,UAAU,aACb,2BACEC,YAAY,WACZC,KAAK,UACLC,MAAOX,EACPY,SAAUT,IAEZ,2BACEM,YAAY,cACZC,KAAK,aACLC,MAAOV,EACPW,SAAUT,IAEZ,4BAAQU,QAAST,GAAjB,qBAGJ,yBAAKI,UAAU,eAAf,IAA+BH,IAA/B,OCpCAS,EAAU,CAENC,MAFM,WAEG,OAAD,4HACYC,MAAM,qCADlB,cACJC,EADI,gBAESA,EAAQC,OAFjB,cAEJA,EAFI,yBAGHA,EAAKC,KAAKJ,OAHP,8CAMRK,WARM,WAQQ,OAAD,0HACAN,EAAQC,QADR,cACbM,EADa,yBAEZA,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,SAASC,KAFlC,+CAQRZ,ICsCAa,EAlDO,WAAO,IAAD,EACEC,mBAAS,iCADX,mBACjB1B,EADiB,KACV2B,EADU,OAEMD,mBAAS,IAFf,mBAEjBvB,EAFiB,KAERyB,EAFQ,OAGMF,mBAAS,IAHf,mBAGjB5B,EAHiB,KAGR+B,EAHQ,OAIYH,mBAAS,IAJrB,mBAIjB3B,EAJiB,KAIL+B,EAJK,KAMlB5B,EAAa,uCAAG,4BAAA6B,EAAA,sEACGnB,EAAQM,aADX,OACZI,EADY,OAElBK,EAASL,GAFS,2CAAH,qDAKbU,EAAY,SAAAC,GAAU,IAAD,EACLA,EAAMC,OAAjBvC,EADgB,EAChBA,IADgB,EACXwC,GACZR,EAAShC,IAyBb,OAJDyC,qBAAU,WACR,sBAAC,sBAAAL,EAAA,kEAAYH,EAAZ,SAA6BhB,EAAQC,QAArC,sGAAD,KACC,IAGE,kBAAC,EAAD,CACAf,QAASA,EACTC,WAAYA,EACZC,MAAOA,EACPE,cAAeA,EACfD,aA5BiB,SAAAgC,GAAU,IAAD,EACJA,EAAMC,OAArB1B,EADmB,EACnBA,KAAMC,EADa,EACbA,MACD,YAATD,EAAoBqB,GAAY,kBAAMpB,KACpCqB,GAAe,kBAAMrB,MA0B1BN,QAvBe,WACf,OAAOA,EAAQkC,KAAI,SAAClB,EAAMmB,GAAP,OACf,yBACAC,IAAKD,EACLH,GAAIhB,EAAKgB,GACT7B,UAAU,QACVX,IAAKwB,EAAKK,IACVb,QAASqB,WCnBNQ,MATf,WACE,OACE,yBAAKlC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAUN,OAAOC,SAASM,UAAY,IACnD,kBAAC,EAAD,CAAKC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,KAEjCa,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.2889a5e0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <p> Do you even </p>\n      <img\n        src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n        alt=\"troll?\"\n      />\n      <p> meme bro ?</p>\n    </header>\n  );\n}\n\nexport default Header;","import React from \"react\";\n\nconst MemeComponent = ({\n  topText,\n  bottomText,\n  image,\n  handleChange,\n  roulleteClick,\n  memeges,\n}) => {\n  console.log(memeges);\n  return (\n    <div className=\"memeContainer\">\n      <div className=\"memeGenerator\">\n        <div className=\"meme\">\n          <img className=\"memege\" src={image} />\n          <h1 className=\"topText\"> {topText} </h1>\n          <h1 className=\"bottomText\"> {bottomText} </h1>\n        </div>\n\n        <div className=\"generator\">\n          <input\n            placeholder=\"top text\"\n            name=\"topText\"\n            value={topText}\n            onChange={handleChange}\n          />\n          <input\n            placeholder=\"bottom text\"\n            name=\"bottomText\"\n            value={bottomText}\n            onChange={handleChange}\n          />\n          <button onClick={roulleteClick}> Meme roullete </button>\n        </div>\n      </div>\n      <div className=\"memeCollage\"> {memeges()} </div>\n    </div>\n  );\n};\n\nexport default MemeComponent;","const ImgFlip = {\n\n    async memes() {\n        const request = await fetch('https://api.imgflip.com/get_memes')\n        const json = await request.json()\n        return json.data.memes\n    },\n\n    async randomMeme() {\n    const meme = await ImgFlip.memes()\n    return meme[Math.floor(Math.random() * meme.length)].url    \n    }\n\n\n}\n \nexport default ImgFlip;","import React, {useState, useEffect} from 'react'\nimport MemeComponent from '../src/memeComponent'\nimport ImgFlip from '../src/imgflip'\n\nconst MemeContainer = () => {\n    const [image, setImage] = useState('http://i.imgflip.com/1bij.jpg')\n    const [memeges, setMemeges] = useState([])\n    const [topText, setTopText] = useState('')\n    const [bottomText, setBottomText] = useState('')\n\n    const roulleteClick = async () => {\n        const random = await ImgFlip.randomMeme()\n        setImage(random)\n    }\n\n    const memeClick = event => {\n        const {src, id} = event.target\n        setImage(src)\n    }\n\n    const handleChange = event => {\n        const {name, value} = event.target\n        if(name === 'topText') setTopText( () => value)\n        else setBottomText( () => value)\n    }\n\n    const allMemeges = () => {\n        return memeges.map((meme, i) => \n            <img \n            key={i} \n            id={meme.id} \n            className='image' \n            src={meme.url}\n            onClick={memeClick}\n            />\n        )\n    }\n\n   useEffect(() => {\n     (async () => setMemeges(await ImgFlip.memes()))()\n   }, [])\n\n    return (\n        <MemeComponent \n        topText={topText} \n        bottomText={bottomText}\n        image={image}\n        roulleteClick={roulleteClick}\n        handleChange={handleChange}\n        memeges={allMemeges}\n        />\n     );\n}\n \nexport default MemeContainer;","import React from \"react\";\nimport \"../src/App.css\";\nimport Header from \"../src/header\";\nimport MemeContainer from \"../src/memeContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <MemeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport '../src/index.css';\nimport App from '../src/App';\nimport * as serviceWorker from '../src/serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={window.location.pathname || ''}>\n    <App exact path=\"/\" component={App} />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}